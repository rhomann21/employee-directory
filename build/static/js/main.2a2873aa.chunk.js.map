{"version":3,"sources":["components/Table.js","components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","state","filtered","handleChangeFirstName","bind","handleChangeLastName","handleChangeDepName","this","setState","employees","e","newList","target","value","filter","employee","lc","firstname","toString","toLowerCase","includes","lastname","department","className","type","onChange","placeholder","class","map","Component","Employees","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a2873aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filtered: []\r\n    }\r\n    this.handleChangeFirstName = this.handleChangeFirstName.bind(this);\r\n    this.handleChangeLastName = this.handleChangeLastName.bind(this);\r\n    this.handleChangeDepName = this.handleChangeDepName.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      filtered: this.props.employees\r\n    });\r\n  }\r\n\r\n  handleChangeFirstName(e) {\r\n    let currentList = [];\r\n    let newList = [];\r\n\r\n\r\n    if (e.target.value !== \"\") {\r\n      currentList = this.props.employees;\r\n\r\n      newList = currentList.filter(employee => {\r\n        const lc = employee.firstname.toString().toLowerCase();\r\n        const filter = e.target.value.toString().toLowerCase();\r\n        return lc.includes(filter);\r\n      });\r\n    } else {\r\n      newList = this.props.employees;\r\n    }\r\n    this.setState({\r\n      filtered: newList\r\n    });\r\n  }\r\n\r\n  handleChangeLastName(e) {\r\n    let currentList = [];\r\n    let newList = [];\r\n\r\n    if (e.target.value !== \"\") {\r\n      currentList = this.props.employees;\r\n\r\n      newList = currentList.filter(employee => {\r\n        const lc = employee.lastname.toString().toLowerCase();\r\n        const filter = e.target.value.toString().toLowerCase();\r\n        return lc.includes(filter);\r\n      });\r\n    } else {\r\n      newList = this.props.employees;\r\n    }\r\n    this.setState({\r\n      filtered: newList\r\n    });\r\n  }\r\n  \r\n  handleChangeDepName(e) {\r\n    let currentList = [];\r\n    let newList = [];\r\n\r\n    if (e.target.value !== \"\") {\r\n      currentList = this.props.employees;\r\n\r\n      newList = currentList.filter(employee => {\r\n        const lc = employee.department.toString().toLowerCase();\r\n        const filter = e.target.value.toString().toLowerCase();\r\n        return lc.includes(filter);\r\n      });\r\n    } else {\r\n      newList = this.props.employees;\r\n    }\r\n    this.setState({\r\n      filtered: newList\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <div className=\"searchBars\">\r\n            <input \r\n                type=\"text\" \r\n                onChange={this.handleChangeFirstName} \r\n                placeholder=\"Search by First Name...\" />\r\n            <input \r\n                type=\"text\" \r\n                onChange={this.handleChangeLastName} \r\n                placeholder=\"Search by Last Name...\" />\r\n            <input \r\n                type=\"text\" \r\n                onChange={this.handleChangeDepName} \r\n                placeholder=\"Search by Department...\" />\r\n          </div>\r\n        <table className=\"tableStyle\">\r\n            <div class=\"tableBody\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Employee Name</th>\r\n                        <th>Department</th>\r\n                    </tr>\r\n                </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.filtered.map(employee => (\r\n                        <tr>\r\n                            <td>{employee.firstname} {employee.lastname}</td>\r\n                            <td>{employee.department}</td>\r\n                        </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n            </div>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport {  } from '../App.css';\r\n\r\nclass Employees extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      employees: [\r\n        {\r\n          \"firstname\": \"Oriana\",\r\n          \"lastname\": \"Dentici\",\r\n          \"department\": \"Advertising\"\r\n        },\r\n        {\r\n          \"firstname\": \"Scott\",\r\n          \"lastname\": \"Kumor\",\r\n          \"department\": \"Accounting\"\r\n        },\r\n        {\r\n          \"firstname\": \"Izzy\",\r\n          \"lastname\": \"Edson\",\r\n          \"department\": \"Human Resources\"\r\n        },\r\n        {\r\n          \"firstname\": \"Tony\",\r\n          \"lastname\": \"Vester\",\r\n          \"department\": \"Accounting\"\r\n        },\r\n        {\r\n          \"firstname\": \"Eric\",\r\n          \"lastname\": \"Noll\",\r\n          \"department\": \"Sales\"\r\n        },\r\n        {\r\n          \"firstname\": \"Hannah\",\r\n          \"lastname\": \"Chamorro\",\r\n          \"department\": \"Public Relations\"\r\n        },\r\n        {\r\n          \"firstname\": \"Abby\",\r\n          \"lastname\": \"Blachman\",\r\n          \"department\": \"Human Resources\"\r\n        },\r\n        {\r\n          \"firstname\": \"Robert\",\r\n          \"lastname\": \"Wojciechowski\",\r\n          \"department\": \"Marketing\"\r\n        },\r\n        {\r\n          \"firstname\": \"Joanna\",\r\n          \"lastname\": \"Sowa\",\r\n          \"department\": \"Public Relations\"\r\n        },\r\n        {\r\n          \"firstname\": \"Drew\",\r\n          \"lastname\": \"Russell\",\r\n          \"department\": \"Sales\"\r\n        },\r\n        {\r\n          \"firstname\": \"Rachael\",\r\n          \"lastname\": \"Homann\",\r\n          \"department\": \"Advertising\"\r\n        },\r\n        {\r\n          \"firstname\": \"Katie\",\r\n          \"lastname\": \"McBride\",\r\n          \"department\": \"Marketing\"\r\n        },\r\n        {\r\n          \"firstname\": \"Elizabeth\",\r\n          \"lastname\": \"Benson\",\r\n          \"department\": \"Sales\"\r\n        },\r\n        {\r\n          \"firstname\": \"Gabriel\",\r\n          \"lastname\": \"Patacky\",\r\n          \"department\": \"Human Resources\"\r\n        },\r\n        {\r\n          \"firstname\": \"Scott\",\r\n          \"lastname\": \"Brunswig\",\r\n          \"department\": \"Chief Executive Officer\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 className=\"headerStyle\">Employee Directory</h1>\r\n        <Table employees={this.state.employees} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Employees;","import React from \"react\";\nimport Employees from \"./components/Employees\";\n\nfunction App() {\n  return <Employees />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}